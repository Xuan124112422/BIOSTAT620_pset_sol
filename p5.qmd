---
title: "Pset 05 "
author: "hongye xuan"
date: "`r Sys.Date()`"
format: html
execute:
  echo: true   # Show all code
  eval: true   # Ensure all code runs
  warning: false
  message: false
---

```{r eval=TRUE}
same_birthday <- function(n) {
  # Generate n random birthdays (assuming no one is born on February 29)
  birthdays <- sample(1:365, n, replace = TRUE)  
  
  # Check if there are duplicate birthdays in the generated sample
  result <- any(duplicated(birthdays))  
  
  # Print the generated birthdays and whether there is a duplicate
  print(birthdays)  
  print(paste("Are there duplicate birthdays?", result))  
  
  # Return the result
  return(result)  
}


```

```{r eval=TRUE}
set.seed(2025)  # Set seed for reproducibility
B <- 10^3       # Number of simulations
n <- 50         # Number of people in the classroom

# Run the simulation B times and count how often there is a shared birthday
same_birthday_simulations <- replicate(B, same_birthday(n))

# Compute the probability of at least two people sharing a birthday
probability <- mean(same_birthday_simulations)

# Print the estimated probability
print(paste("Estimated probability of at least two people sharing a birthday:", probability))

```

```{r eval=TRUE}
# Load ggplot2 for visualization
library(ggplot2)

set.seed(1997)  # Set seed for reproducibility

# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) { 
  mean(replicate(B, same_birthday(n)))  # Estimate probability
}

# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) { 
  if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
  return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}

# Function to check if at least two people share a birthday
same_birthday <- function(n) {
  birthdays <- sample(1:365, n, replace = TRUE)  
  return(length(unique(birthdays)) < n)  # If unique count < n, a duplicate exists
}

# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob, B = 1000)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities

# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[monte_carlo_probs > 0.5])

# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))

# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)

# ggplot2 visualization (explicitly using print)
p <- ggplot(df, aes(x = n)) +
  geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
  geom_line(aes(y = Exact, color = "Exact"), linewidth = 1) +  # Exact probability line
  labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
       x = "Group Size (n)", y = "Probability") +
  scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
  theme_minimal()

# Ensure the plot is displayed
print(p)  # Explicitly print the ggplot object

```

```{r eval=TRUE}
set.seed(1998)  # Ensure reproducibility

# Function to compute Monte Carlo probability for a given B
compute_prob_B <- function(B, n = 23) {
  mean(replicate(B, same_birthday(n)))  # Estimate probability for given B
}

# Compute exact probability for n = 23
exact_p23 <- exact_prob(23)

# Define different values of B
B_values <- seq(10, 250, 5)^2  # Squared sequence from 10 to 250 in steps of 5

# Compute Monte Carlo probabilities for each B
monte_carlo_probs_B <- sapply(B_values, compute_prob_B)

# Create a data frame for plotting
df_B <- data.frame(B = B_values, MonteCarlo = monte_carlo_probs_B, Exact = exact_p23)

# Plot Monte Carlo estimates against sqrt(B)
library(ggplot2)

p <- ggplot(df_B, aes(x = sqrt(B), y = MonteCarlo)) +
  geom_point(color = "blue", size = 2) +  # Monte Carlo estimates as points
  geom_hline(yintercept = exact_p23, color = "red", linetype = "solid", size = 1) +  # Exact probability line
  geom_hline(yintercept = exact_p23 + 0.005, color = "red", linetype = "dashed") +  # Upper bound
  geom_hline(yintercept = exact_p23 - 0.005, color = "red", linetype = "dashed") +  # Lower bound
  labs(title = "Stabilization of Monte Carlo Probability Estimates",
       x = "sqrt(B)", y = "Estimated Probability") +
  theme_minimal()

print(p)  # Ensure the ggplot is displayed

```

```{r eval=TRUE}
# Load ggplot2 for visualization
library(ggplot2)

set.seed(1997)  # Ensure reproducibility

# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B) { 
  mean(replicate(B, same_birthday(n)))  # Estimate probability with given B
}

# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) { 
  if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
  return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}

# Choose B based on exercise 5 results (stabilization around 20,000 iterations)
B_selected <- 20000  # This ensures estimates are within ±0.005 of the exact probability

# Compute probabilities for different values of n
n_values <- seq(1, 60)
monte_carlo_probs <- sapply(n_values, compute_prob, B = B_selected)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities

# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)

# ggplot2 visualization
p <- ggplot(df, aes(x = n)) +
  geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
  geom_line(aes(y = Exact, color = "Exact"), linewidth = 1) +  # Exact probability line
  labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
       x = "Group Size (n)", y = "Probability") +
  scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
  theme_minimal()

# Ensure the plot is displayed
print(p)




```

## **7a. Probability of Landing on Green**

In American Roulette, there are: - **18 red slots** - **18 black slots** - **2 green slots** (0 and 00) - **Total slots**: ( 18 + 18 + 2 = 38 )

Thus, the probability of landing on a green slot is:

$$
P(\text{green}) = \frac{2}{38} = \frac{1}{19} \approx 0.05263
$$

This means there is approximately a **5.26% chance** of the ball landing on a green slot.

------------------------------------------------------------------------

## **7b. Expected Value and Standard Error**

In this game: - If a player **wins** (lands on green), they receive **\$17 profit**. - If a player **loses** (lands on red or black), they **lose their \$1 bet**.

Thus, the **casino's winnings** for a single bet are: - ( -17 ) dollars if the player wins. - ( +1 ) dollar if the player loses.

### **1️⃣ Expected Value Calculation**

The **expected value** of the casino's profit per bet is:

$$
E(X) = (-17) \times P(\text{win}) + (1) \times P(\text{lose})
$$

Substituting the probabilities:

$$
E(X) = (-17) \times \frac{2}{38} + (1) \times \frac{36}{38}
$$

$$
E(X) = -\frac{34}{38} + \frac{36}{38} = \frac{2}{38} \approx 0.05263
$$

Thus, for ( n = 1000 ) bets:

$$
E(\text{Total Winnings}) = 1000 \times 0.05263 \approx 52.63
$$

------------------------------------------------------------------------

### **2️⃣ Standard Error Calculation**

The **standard error (SE)** is given by:

$$
SE = \sqrt{n} \times \sigma
$$

where ( \sigma ) is the standard deviation of a single bet:

$$
\sigma^2 = (-17 - E(X))^2 \times P(\text{win}) + (1 - E(X))^2 \times P(\text{lose})
$$

Substituting values:

$$
\sigma^2 = (-17 - 0.05263)^2 \times \frac{2}{38} + (1 - 0.05263)^2 \times \frac{36}{38}
$$

For ( n = 1000 ):

$$
SE = \sqrt{1000} \times \sigma
$$

------------------------------------------------------------------------

## **Final Answers**

1.  **The probability of landing on green** is:

$$
P(\text{green}) = \frac{2}{38} = \frac{1}{19} \approx 0.05263
$$

2.  **Expected value (analytical result):**

$$
E(\text{Total Winnings}) = 52.63
$$

3.  **Standard error (analytical result):**

$$
SE = \sqrt{1000} \times \sigma
$$

```{r eval=TRUE}
set.seed(2025)  # Ensure reproducibility

# Define the possible outcomes
outcomes <- c(-17, 1)  # -17 if player wins, 1 if casino wins
probabilities <- c(2/38, 36/38)  # P(win) = 2/38, P(lose) = 36/38

# Simulate one bet
n <- 1
casino_winnings <- sample(outcomes, n, replace = TRUE, prob = probabilities)

# Print the result
print(paste("Casino's winnings from one bet:", casino_winnings))
```

```{r eval=TRUE}
set.seed(2025)  # Ensure reproducibility

# Number of bets
n <- 1000

# Simulate casino winnings for n bets
casino_winnings_n <- sample(outcomes, n, replace = TRUE, prob = probabilities)

# Calculate total winnings of the casino
total_winnings <- sum(casino_winnings_n)

# Print total casino winnings
print(paste("Casino's total winnings after", n, "bets:", total_winnings))

# Estimate probability that casino loses money
prob_casino_loses <- mean(cumsum(casino_winnings_n) < 0)

# Print probability of casino losing money
print(paste("Estimated probability that the casino loses money:", prob_casino_loses))

```

## **Expected Value Calculation**

The **expected value** of the casino’s winnings per bet is given by:

$$
E(X) = (-17) \times P(\text{win}) + (1) \times P(\text{lose})
$$

Substituting the probabilities:

$$
E(X) = (-17) \times \frac{2}{38} + (1) \times \frac{36}{38}
$$

$$
E(X) = -\frac{34}{38} + \frac{36}{38} = \frac{2}{38} \approx 0.05263
$$

Thus, for ( n = 1000 ) bets:

$$
E(\text{Total Winnings}) = 1000 \times 0.05263 \approx 52.63
$$

```{r eval=TRUE}
# Compute expected value
expected_value <- 0.05263
n <- 1000
expected_total_winnings <- n * expected_value

# Print result
print(paste("Expected value after", n, "bets:", expected_total_winnings))

```

## **2️⃣ Standard Error of ( X )**

The **standard error (SE)** is calculated as:

$$
SE_X = \frac{\sigma}{\sqrt{n}}
$$

where ( \sigma ) is the **standard deviation** of ( X ), given by:

$$
\sigma^2 = \sum_{i=1}^{n} (x_i - E(X))^2 P(x_i)
$$

Substituting the values:

$$
\sigma^2 = (-17 - 0.05263)^2 \times \frac{2}{38} + (1 - 0.05263)^2 \times \frac{36}{38}
$$

The standard error for ( n = 1000 ) bets is:

$$
SE_X = \frac{\sigma}{\sqrt{1000}}
$$

```{r eval=TRUE}
# Compute standard deviation of a single bet
sigma_squared <- ((-17 - expected_value)^2 * (2/38)) + ((1 - expected_value)^2 * (36/38))
sigma <- sqrt(sigma_squared)

# Compute standard error
SE <- sqrt(n) * sigma

# Print result
print(paste("Standard error after", n, "bets:", SE))


```

## **3️⃣ Expected Value of ( S ) and Monte Carlo Confirmation**

If ( S ) is the sum of ( n ) independent samples of ( X ), then:

$$
E(S) = n \times E(X)
$$

For ( n = 1000 ):

$$
E(S) = 1000 \times 0.05263 = 52.63
$$

To verify this using Monte Carlo simulation, we estimate ( E(S) ) by simulating multiple trials and taking the average:

$$
\hat{E}(S) = \frac{1}{B} \sum_{b=1}^{B} S_b
$$

where ( B ) is the number of Monte Carlo trials.

The **standard error of ( S )** is:

$$
SE_S = \sqrt{n} \times \sigma
$$

Using Monte Carlo simulation, we estimate:

$$
\hat{SE}(S) = \frac{1}{B} \sum_{b=1}^{B} \left( S_b - \hat{E}(S) \right)^2
$$

which should approximate the analytical result.

```{r eval=TRUE}
set.seed(2025)  # Ensure reproducibility

# Define the possible outcomes
outcomes <- c(-17, 1)  # -17 if player wins, 1 if casino wins
probabilities <- c(2/38, 36/38)  # P(win) = 2/38, P(lose) = 36/38

# Simulate casino winnings for n bets
casino_winnings_n <- sample(outcomes, n, replace = TRUE, prob = probabilities)

# Compute Monte Carlo estimates
monte_carlo_expected_value <- mean(casino_winnings_n)
monte_carlo_standard_error <- sd(casino_winnings_n) / sqrt(n)

# Print Monte Carlo results
print(paste("Monte Carlo Expected Value:", monte_carlo_expected_value))
print(paste("Monte Carlo Standard Error:", monte_carlo_standard_error))




```

## **1️⃣ Simulating ( S )**

We define ( S ) as the sum of **( n = 1000 )** independent samples of ( X ), where:

-   ( X ) takes values **( -17 )** (if the player wins) and **( +1 )** (if the player loses).
-   The probability of winning is **( 2/38 )**, and the probability of losing is **( 36/38 )**.

We will generate a large number of Monte Carlo simulations of ( S ) and check its distribution.

```{r eval=TRUE}
set.seed(2025)  # Ensure reproducibility

# Parameters
n <- 1000  # Number of bets per simulation
B <- 10000 # Number of Monte Carlo simulations

# Define possible outcomes
outcomes <- c(-17, 1)
probabilities <- c(2/38, 36/38)

# Simulate S B times
S_values <- replicate(B, sum(sample(outcomes, n, replace = TRUE, prob = probabilities)))

# Compute standardized S values
S_standardized <- (S_values - mean(S_values)) / sd(S_values)
library(ggplot2)

# Histogram of S
ggplot(data.frame(S_values), aes(x = S_values)) +
  geom_histogram(aes(y = ..density..), bins = 30, color = "black", fill = "blue") +
  stat_function(fun = dnorm, args = list(mean = mean(S_values), sd = sd(S_values)), color = "red", lwd = 1.2) +
  labs(title = "Histogram of S", x = "Total Casino Winnings (S)", y = "Density") +
  theme_minimal()

```


## **Answer**
The normal approximation is slightly off in the tails because the distribution of \( S \) is not perfectly normal. The best way to improve this is by **increasing \( n \), the number of people playing (or bets per round)**.

- **Increasing \( n \)** makes the distribution of \( S \) closer to normal due to the **Central Limit Theorem (CLT)**.
- **Increasing \( B \)** (the number of Monte Carlo iterations) reduces the randomness in estimation but does **not** change the shape of the distribution.

Thus, **increasing \( n \) is the best approach to improve normal approximation.**







## ** CLT Approximation for Casino Profit Probability**

By the **Central Limit Theorem (CLT)**, the total casino winnings \( S \) after \( n \) bets is approximately normally distributed:

$$
S = \sum_{i=1}^{n} X_i
$$

where each \( X_i \) represents the profit from a single bet. According to CLT:

$$
S \sim N(nE(X), n\sigma^2)
$$

where:
- \( E(X) \) is the expected value of a single bet.
- \( \sigma^2 \) is the variance of a single bet.

From previous calculations:

$$
E(X) = (-17) \times \frac{2}{38} + (1) \times \frac{36}{38} = 0.05263
$$

$$
\sigma^2 = (-17 - E(X))^2 \times \frac{2}{38} + (1 - E(X))^2 \times \frac{36}{38}
$$

Thus, for \( n = 1000 \), we approximate \( S \) as:

$$
S \sim N(1000 \times 0.05263, 1000 \times \sigma^2)
$$

To compute \( P(S > 0) \), we standardize:

$$
P(S > 0) = P\left( Z > -\frac{E(S)}{\sigma_S} \right)
$$

where:

$$
Z = \frac{S - E(S)}{\sigma_S} \sim N(0,1)
$$

Applying the normal CDF function \( \Phi(x) \):

$$
P(S > 0) = 1 - \Phi\left( -\frac{E(S)}{\sigma_S} \right)
$$

where \( \Phi(x) \) represents the cumulative distribution function (CDF) of the standard normal distribution.

---

## ** Monte Carlo Simulation for Comparison**

Monte Carlo simulation estimates \( P(S > 0) \) by running multiple trials and computing:

$$
\hat{P}(S > 0) = \frac{\text{number of simulations where } S > 0}{\text{total simulations}}
$$

---

```{r eval=TRUE}
set.seed(2025)  # Ensure reproducibility

# Define parameters
n <- 1000  # Number of bets
B <- 10000  # Number of Monte Carlo simulations

# Casino single-bet profit outcomes
outcomes <- c(-17, 1)
probabilities <- c(2/38, 36/38)

# Monte Carlo simulation: Compute S B times
S_values <- replicate(B, sum(sample(outcomes, n, replace = TRUE, prob = probabilities)))

# Compute Monte Carlo probability of profit
prob_monte_carlo <- mean(S_values > 0)

# Compute CLT approximation
expected_value <- 0.05263
sigma_squared <- ((-17 - expected_value)^2 * (2/38)) + ((1 - expected_value)^2 * (36/38))
sigma <- sqrt(sigma_squared)

# CLT estimated mean and standard deviation of S
E_S <- n * expected_value
sigma_S <- sqrt(n) * sigma

# Compute probability using normal approximation
prob_CLT <- 1 - pnorm(0, mean = E_S, sd = sigma_S)

# Print results
print(paste("Monte Carlo estimated probability of casino profit:", prob_monte_carlo))
print(paste("CLT estimated probability of casino profit:", prob_CLT))


```



## ** Using CLT to Solve for \( n \)**

The casino's total winnings \( S \) after \( n \) bets is:

$$
S = \sum_{i=1}^{n} X_i
$$

By the **Central Limit Theorem (CLT)**, \( S \) is approximately normally distributed:

$$
S \sim N(nE(X), n\sigma^2)
$$

where:
- \( E(X) \) is the **expected profit per bet**.
- \( \sigma^2 \) is the **variance of a single bet**.

We want to find \( n \) such that the probability of losing money is **only 1%**:

$$
P(S < 0) = 0.01
$$

Standardizing:

$$
P\left( Z < \frac{0 - nE(X)}{\sigma_S} \right) = 0.01
$$

where:

$$
Z = \frac{S - E(S)}{\sigma_S} \sim N(0,1)
$$

Using the normal CDF:

$$
\Phi\left(\frac{0 - nE(X)}{\sigma_S}\right) = 0.01
$$

From standard normal tables:

$$
\frac{0 - nE(X)}{\sigma_S} = -2.33
$$

Solving for \( n \):

$$
nE(X) = 2.33 \times \sigma_S
$$

$$
nE(X) = 2.33 \times \sigma \times \sqrt{n}
$$

Rearranging:

$$
n = \left( \frac{2.33 \times \sigma}{E(X)} \right)^2
$$

```{r eval=TRUE}
# Given expected value per bet
expected_value <- 0.05263

# Compute variance of a single bet
sigma_squared <- ((-17 - expected_value)^2 * (2/38)) + ((1 - expected_value)^2 * (36/38))
sigma <- sqrt(sigma_squared)

# Solve for n using CLT
z_critical <- qnorm(0.01)  # -2.33 for 1% probability
n_clt <- ( (abs(z_critical) * sigma) / expected_value )^2

# Print required number of bets
print(paste("Minimum n required (CLT-based):", round(n_clt)))
set.seed(2025)  # Ensure reproducibility

# Define number of bets from CLT result
n_monte <- round(n_clt)
B <- 10000  # Number of Monte Carlo simulations

# Possible casino outcomes per bet
outcomes <- c(-17, 1)
probabilities <- c(2/38, 36/38)

# Simulate total casino winnings for B trials
S_values <- replicate(B, sum(sample(outcomes, n_monte, replace = TRUE, prob = probabilities)))

# Compute probability of casino losing money
prob_loss_monte <- mean(S_values < 0)

# Print Monte Carlo estimated probability
print(paste("Monte Carlo estimated probability of casino losing money:", prob_loss_monte))

```
