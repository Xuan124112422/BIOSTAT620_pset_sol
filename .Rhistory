same_birthday <- function(n) {
# Generate n random birthdays (assuming no one is born on February 29)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there are duplicate birthdays in the generated sample
return(any(duplicated(birthdays)))
}
same_birthday <- function(n) {
# Generate n random birthdays (assuming no one is born on February 29)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there are duplicate birthdays in the generated sample
result <- any(duplicated(birthdays))
# Print the generated birthdays and whether there is a duplicate
print(birthdays)
print(paste("Are there duplicate birthdays?", result))
# Return the result
return(result)
}
same_birthday <- function(n) {
# Generate n random birthdays (assuming no one is born on February 29)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there are duplicate birthdays in the generated sample
result <- any(duplicated(birthdays))
# Print the generated birthdays and whether there is a duplicate
print(birthdays)
print(paste("Are there duplicate birthdays?", result))
# Return the result
return(result)
}
same_birthday <- function(n) {
# Generate n random birthdays (assuming no one is born on February 29)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there are duplicate birthdays in the generated sample
result <- any(duplicated(birthdays))
# Print the generated birthdays and whether there is a duplicate
print(birthdays)
print(paste("Are there duplicate birthdays?", result))
# Return the result
return(result)
}
same_birthday <- function(n) {
# Generate n random birthdays (assuming no one is born on February 29)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there are duplicate birthdays in the generated sample
result <- any(duplicated(birthdays))
# Print the generated birthdays and whether there is a duplicate
print(birthdays)
print(paste("Are there duplicate birthdays?", result))
# Return the result
return(result)
}
same_birthday(10)  # 例如，检查 10 个人是否有相同生日
set.seed(2025)  # Set seed for reproducibility
B <- 10^3       # Number of simulations
n <- 50         # Number of people in the classroom
# Run the simulation B times and count how often there is a shared birthday
same_birthday_simulations <- replicate(B, same_birthday(n))
# Compute the probability of at least two people sharing a birthday
probability <- mean(same_birthday_simulations)
# Print the estimated probability
print(paste("Estimated probability of at least two people sharing a birthday:", probability))
set.seed(1997)  # Set seed for reproducibility
# Define a function to compute the probability of at least two people sharing a birthday
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Monte Carlo estimation of probability
}
# Compute probabilities for different group sizes
n_values <- 1:50  # Range of group sizes to test
probabilities <- sapply(n_values, compute_prob)  # Compute probability for each n
# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[probabilities > 0.5])
set.seed(1997)  # Set seed for reproducibility
# Define a function to compute the probability of at least two people sharing a birthday
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Monte Carlo estimation of probability
}
# Find the smallest group size where probability exceeds 50%
threshold_n <- NA  # Initialize variable
n <- 1  # Start with n = 1
while (n <= 50) {
prob <- compute_prob(n)  # Compute probability for current n
if (prob > 0.5) {  # If probability exceeds 50%, stop
threshold_n <- n
break
}
n <- n + 1  # Increment n and continue
}
# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))
set.seed(1997)  # Set seed for reproducibility
# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) {
if (n > 365) {
return(0)  # If n > 365, probability is 0 since at least two people must share a birthday
}
return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using the complement rule
}
# Function to estimate probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Monte Carlo estimation of probability
}
# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob)  # Using Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities
# Plot Monte Carlo probabilities as points
plot(n_values, monte_carlo_probs, type = "p", pch = 16, col = "blue",
xlab = "Group Size (n)", ylab = "Probability",
main = "Monte Carlo vs. Exact Probability of Shared Birthday")
# Add the exact probability as a red line
lines(n_values, exact_probs, col = "red", lwd = 2)
# Add a legend
legend("bottomright", legend = c("Monte Carlo", "Exact"), col = c("blue", "red"), pch = c(16, NA), lwd = c(NA, 2))
# Load ggplot2 for visualization
library(ggplot2)
set.seed(1997)  # Set seed for reproducibility
# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Estimate probability
}
# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) {
if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}
# Function to check if at least two people share a birthday
same_birthday <- function(n) {
birthdays <- sample(1:365, n, replace = TRUE)
return(length(unique(birthdays)) < n)  # If unique count < n, a duplicate exists
}
# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob, B = 1000)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities
# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[monte_carlo_probs > 0.5])
# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))
# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)
# ggplot2 visualization (explicitly using print)
p <- ggplot(df, aes(x = n)) +
geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
geom_line(aes(y = Exact, color = "Exact"), size = 1) +  # Exact probability line
labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
x = "Group Size (n)", y = "Probability") +
scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
theme_minimal()
# Ensure the plot is displayed
print(p)  # Explicitly print the ggplot object
# Load ggplot2 for visualization
library(ggplot2)
set.seed(1997)  # Set seed for reproducibility
# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Estimate probability
}
# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) {
if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}
# Function to check if at least two people share a birthday
same_birthday <- function(n) {
birthdays <- sample(1:365, n, replace = TRUE)
return(length(unique(birthdays)) < n)  # If unique count < n, a duplicate exists
}
# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob, B = 1000)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities
# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[monte_carlo_probs > 0.5])
# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))
# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)
# ggplot2 visualization (explicitly using print)
p <- ggplot(df, aes(x = n)) +
geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
geom_line(aes(y = Exact, color = "Exact"), linewidth = 1) +  # Exact probability line
labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
x = "Group Size (n)", y = "Probability") +
scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
theme_minimal()
# Ensure the plot is displayed
print(p)  # Explicitly print the ggplot object
# Load ggplot2 for visualization
library(ggplot2)
set.seed(1997)  # Set seed for reproducibility
# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Estimate probability
}
# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) {
if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}
# Function to check if at least two people share a birthday
same_birthday <- function(n) {
birthdays <- sample(1:365, n, replace = TRUE)
return(length(unique(birthdays)) < n)  # If unique count < n, a duplicate exists
}
# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob, B = 1000)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities
# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[monte_carlo_probs > 0.5])
# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))
# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)
# ggplot2 visualization (explicitly using print)
p <- ggplot(df, aes(x = n)) +
geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
geom_line(aes(y = Exact, color = "Exact"), linewidth = 1) +  # Exact probability line
labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
x = "Group Size (n)", y = "Probability") +
scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
theme_minimal()
# Ensure the plot is displayed
print(p)  # Explicitly print the ggplot object
# Load ggplot2 for visualization
library(ggplot2)
set.seed(1997)  # Set seed for reproducibility
# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Estimate probability
}
# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) {
if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}
# Function to check if at least two people share a birthday
same_birthday <- function(n) {
birthdays <- sample(1:365, n, replace = TRUE)
return(length(unique(birthdays)) < n)  # If unique count < n, a duplicate exists
}
# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob, B = 1000)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities
# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[monte_carlo_probs > 0.5])
# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))
# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)
# ggplot2 visualization (explicitly using print)
p <- ggplot(df, aes(x = n)) +
geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
geom_line(aes(y = Exact, color = "Exact"), linewidth = 1) +  # Exact probability line
labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
x = "Group Size (n)", y = "Probability") +
scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
theme_minimal()
# Ensure the plot is displayed
print(p)  # Explicitly print the ggplot object
same_birthday <- function(n) {
# Generate n random birthdays (assuming no one is born on February 29)
birthdays <- sample(1:365, n, replace = TRUE)
# Check if there are duplicate birthdays in the generated sample
result <- any(duplicated(birthdays))
# Print the generated birthdays and whether there is a duplicate
print(birthdays)
print(paste("Are there duplicate birthdays?", result))
# Return the result
return(result)
}
set.seed(2025)  # Set seed for reproducibility
B <- 10^3       # Number of simulations
n <- 50         # Number of people in the classroom
# Run the simulation B times and count how often there is a shared birthday
same_birthday_simulations <- replicate(B, same_birthday(n))
# Compute the probability of at least two people sharing a birthday
probability <- mean(same_birthday_simulations)
# Print the estimated probability
print(paste("Estimated probability of at least two people sharing a birthday:", probability))
# Load ggplot2 for visualization
library(ggplot2)
set.seed(1997)  # Set seed for reproducibility
# Function to compute probability using Monte Carlo simulation
compute_prob <- function(n, B = 10^3) {
mean(replicate(B, same_birthday(n)))  # Estimate probability
}
# Function to compute exact probability using the multiplication rule
exact_prob <- function(n) {
if (n > 365) return(0)  # If n > 365, probability is 0 (birthday must repeat)
return(1 - prod((365:(365 - n + 1)) / 365))  # Compute probability using complement rule
}
# Function to check if at least two people share a birthday
same_birthday <- function(n) {
birthdays <- sample(1:365, n, replace = TRUE)
return(length(unique(birthdays)) < n)  # If unique count < n, a duplicate exists
}
# Compute probabilities for different values of n
n_values <- 1:50
monte_carlo_probs <- sapply(n_values, compute_prob, B = 1000)  # Monte Carlo simulation
exact_probs <- sapply(n_values, exact_prob)  # Compute exact probabilities
# Find the smallest group size where probability exceeds 50%
threshold_n <- min(n_values[monte_carlo_probs > 0.5])
# Print the result
print(paste("The group size where the chance becomes greater than 50% is:", threshold_n))
# Convert data to a data frame for ggplot2
df <- data.frame(n = n_values, MonteCarlo = monte_carlo_probs, Exact = exact_probs)
# ggplot2 visualization (explicitly using print)
p <- ggplot(df, aes(x = n)) +
geom_point(aes(y = MonteCarlo, color = "Monte Carlo"), size = 2) +  # Monte Carlo points
geom_line(aes(y = Exact, color = "Exact"), linewidth = 1) +  # Exact probability line
labs(title = "Monte Carlo vs. Exact Probability of Shared Birthday",
x = "Group Size (n)", y = "Probability") +
scale_color_manual(values = c("Monte Carlo" = "blue", "Exact" = "red")) +
theme_minimal()
# Ensure the plot is displayed
print(p)  # Explicitly print the ggplot object
set.seed(1998)  # Ensure reproducibility
# Function to compute Monte Carlo probability for a given B
compute_prob_B <- function(B, n = 23) {
mean(replicate(B, same_birthday(n)))  # Estimate probability for given B
}
# Compute exact probability for n = 23
exact_p23 <- exact_prob(23)
# Define different values of B
B_values <- seq(10, 250, 5)^2  # Squared sequence from 10 to 250 in steps of 5
# Compute Monte Carlo probabilities for each B
monte_carlo_probs_B <- sapply(B_values, compute_prob_B)
# Create a data frame for plotting
df_B <- data.frame(B = B_values, MonteCarlo = monte_carlo_probs_B, Exact = exact_p23)
# Plot Monte Carlo estimates against sqrt(B)
library(ggplot2)
p <- ggplot(df_B, aes(x = sqrt(B), y = MonteCarlo)) +
geom_point(color = "blue", size = 2) +  # Monte Carlo estimates as points
geom_hline(yintercept = exact_p23, color = "red", linetype = "solid", size = 1) +  # Exact probability line
geom_hline(yintercept = exact_p23 + 0.005, color = "red", linetype = "dashed") +  # Upper bound
geom_hline(yintercept = exact_p23 - 0.005, color = "red", linetype = "dashed") +  # Lower bound
labs(title = "Stabilization of Monte Carlo Probability Estimates",
x = "sqrt(B)", y = "Estimated Probability") +
theme_minimal()
print(p)  # Ensure the ggplot is displayed
## **7a. Probability of Landing on Green**
In American Roulette, there are:
# Function to compute Monte Carlo probability for a given B
compute_prob_B <- function(B, n = 23) {
mean(replicate(B, same_birthday(n)))  # Estimate probability for given B
}
# Compute exact probability for n = 23
exact_p23 <- exact_prob(23)
# Define different values of B
B_values <- seq(10, 250, 5)^2  # Squared sequence from 10 to 250 in steps of 5
# Compute Monte Carlo probabilities for each B
monte_carlo_probs_B <- sapply(B_values, compute_prob_B)
# Create a data frame for plotting
df_B <- data.frame(B = B_values, MonteCarlo = monte_carlo_probs_B, Exact = exact_p23)
# Plot Monte Carlo estimates against sqrt(B)
library(ggplot2)
p <- ggplot(df_B, aes(x = sqrt(B), y = MonteCarlo)) +
geom_point(color = "blue", size = 2) +  # Monte Carlo estimates as points
geom_hline(yintercept = exact_p23, color = "red", linetype = "solid", linewidth = 1) +  # Exact probability line
geom_hline(yintercept = exact_p23 + 0.005, color = "red", linetype = "dashed") +  # Upper bound
geom_hline(yintercept = exact_p23 - 0.005, color = "red", linetype = "dashed") +  # Lower bound
labs(title = "Stabilization of Monte Carlo Probability Estimates",
x = "sqrt(B)", y = "Estimated Probability") +
theme_minimal()
print(p)  # Ensure the ggplot is displayed
7a. Probability of Landing on Green
# Function to compute Monte Carlo probability for a given B
compute_prob_B <- function(B, n = 23) {
mean(replicate(B, same_birthday(n)))  # Estimate probability for given B
}
# Compute exact probability for n = 23
exact_p23 <- exact_prob(23)
# Define different values of B
B_values <- seq(10, 250, 5)^2  # Squared sequence from 10 to 250 in steps of 5
# Compute Monte Carlo probabilities for each B
monte_carlo_probs_B <- sapply(B_values, compute_prob_B)
# Create a data frame for plotting
df_B <- data.frame(B = B_values, MonteCarlo = monte_carlo_probs_B, Exact = exact_p23)
# Plot Monte Carlo estimates against sqrt(B)
library(ggplot2)
p <- ggplot(df_B, aes(x = sqrt(B), y = MonteCarlo)) +
geom_point(color = "blue", size = 2) +  # Monte Carlo estimates as points
geom_hline(yintercept = exact_p23, color = "red", linetype = "solid", linewidth = 1) +  # Exact probability line
geom_hline(yintercept = exact_p23 + 0.005, color = "red", linetype = "dashed") +  # Upper bound
geom_hline(yintercept = exact_p23 - 0.005, color = "red", linetype = "dashed") +  # Lower bound
labs(title = "Stabilization of Monte Carlo Probability Estimates",
x = "sqrt(B)", y = "Estimated Probability") +
theme_minimal()
print(p)  # Ensure the ggplot is displayed
set.seed(2025)  # Ensure reproducibility
# Define the possible outcomes
outcomes <- c(-17, 1)  # -17 if player wins, 1 if casino wins
probabilities <- c(2/38, 36/38)  # P(win) = 2/38, P(lose) = 36/38
# Simulate one bet
n <- 1
casino_winnings <- sample(outcomes, n, replace = TRUE, prob = probabilities)
# Print the result
print(paste("Casino's winnings from one bet:", casino_winnings))
set.seed(2025)  # Ensure reproducibility
# Number of bets
n <- 1000
# Simulate casino winnings for n bets
casino_winnings_n <- sample(outcomes, n, replace = TRUE, prob = probabilities)
# Calculate total winnings of the casino
total_winnings <- sum(casino_winnings_n)
# Print total casino winnings
print(paste("Casino's total winnings after", n, "bets:", total_winnings))
# Estimate probability that casino loses money
prob_casino_loses <- mean(cumsum(casino_winnings_n) < 0)
# Print probability of casino losing money
print(paste("Estimated probability that the casino loses money:", prob_casino_loses))
set.seed(2025)  # Ensure reproducibility
# Define the possible outcomes
outcomes <- c(-17, 1)  # -17 if player wins, 1 if casino wins
probabilities <- c(2/38, 36/38)  # P(win) = 2/38, P(lose) = 36/38
# Simulate casino winnings for n bets
casino_winnings_n <- sample(outcomes, n, replace = TRUE, prob = probabilities)
# Compute Monte Carlo estimates
monte_carlo_expected_value <- mean(casino_winnings_n)
monte_carlo_standard_error <- sd(casino_winnings_n) / sqrt(n)
# Print Monte Carlo results
print(paste("Monte Carlo Expected Value:", monte_carlo_expected_value))
print(paste("Monte Carlo Standard Error:", monte_carlo_standard_error))
# Compute standard deviation of a single bet
sigma_squared <- ((-17 - expected_value)^2 * (2/38)) + ((1 - expected_value)^2 * (36/38))
# Compute expected value
expected_value <- 0.05263
n <- 1000
expected_total_winnings <- n * expected_value
# Print result
print(paste("Expected value after", n, "bets:", expected_total_winnings)
# Compute expected value
expected_value <- 0.05263
n <- 1000
expected_total_winnings <- n * expected_value
# Print result
print(paste("Expected value after", n, "bets:", expected_total_winnings)
set.seed(2025)  # Ensure reproducibility
# Number of bets
n <- 1000
# Simulate casino winnings for n bets
casino_winnings_n <- sample(outcomes, n, replace = TRUE, prob = probabilities)
# Calculate total winnings of the casino
total_winnings <- sum(casino_winnings_n)
# Print total casino winnings
print(paste("Casino's total winnings after", n, "bets:", total_winnings))
# Estimate probability that casino loses money
prob_casino_loses <- mean(cumsum(casino_winnings_n) < 0)
# Print probability of casino losing money
print(paste("Estimated probability that the casino loses money:", prob_casino_loses))
# Compute expected value
expected_value <- 0.05263
n <- 1000
expected_total_winnings <- n * expected_value
# Print result
print(paste("Expected value after", n, "bets:", expected_total_winnings)
# Compute standard deviation of a single bet
sigma_squared <- ((-17 - expected_value)^2 * (2/38)) + ((1 - expected_value)^2 * (36/38))
sigma <- sqrt(sigma_squared)
# Compute standard error
SE <- sqrt(n) * sigma
# Print result
print(paste("Standard error after", n, "bets:", SE))
set.seed(2025)  # Ensure reproducibility
# Define the possible outcomes
outcomes <- c(-17, 1)  # -17 if player wins, 1 if casino wins
probabilities <- c(2/38, 36/38)  # P(win) = 2/38, P(lose) = 36/38
# Simulate casino winnings for n bets
casino_winnings_n <- sample(outcomes, n, replace = TRUE, prob = probabilities)
# Compute Monte Carlo estimates
monte_carlo_expected_value <- mean(casino_winnings_n)
monte_carlo_standard_error <- sd(casino_winnings_n) / sqrt(n)
# Print Monte Carlo results
print(paste("Monte Carlo Expected Value:", monte_carlo_expected_value))
print(paste("Monte Carlo Standard Error:", monte_carlo_standard_error))
# Compute expected value
expected_value <- 0.05263
n <- 1000
expected_total_winnings <- n * expected_value
# Print result
print(paste("Expected value after", n, "bets:", expected_total_winnings))
